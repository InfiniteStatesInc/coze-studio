name: Deploy Coze Studio

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker/**'
      - 'Makefile'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Ê≠•È™§1ÔºöÊ£ÄÂá∫‰ª£Á†Å
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Ê≠•È™§2ÔºöÈÖçÁΩÆSSHËøûÊé•
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Ê≠•È™§3ÔºöÊ∑ªÂä†ÊúçÂä°Âô®Âà∞Â∑≤Áü•‰∏ªÊú∫
      - name: Add server to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # Ê≠•È™§4ÔºöÊ£ÄÊü•ÂèòÊõ¥Êñá‰ª∂Âπ∂ÂáÜÂ§áÈÉ®ÁΩ≤
      - name: Check changed files
        id: changes
        run: |
          echo "üîç Ê£ÄÊü•ÂèòÊõ¥Êñá‰ª∂..."
          if git diff --name-only HEAD~1 HEAD | grep -q "^frontend/"; then
            echo "frontend_changed=true" >> $GITHUB_OUTPUT
            echo "üì¶ ÂâçÁ´Ø‰ª£Á†ÅÊúâÂèòÊõ¥"
          else
            echo "frontend_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only HEAD~1 HEAD | grep -q "^backend/"; then
            echo "backend_changed=true" >> $GITHUB_OUTPUT
            echo "üîß ÂêéÁ´Ø‰ª£Á†ÅÊúâÂèòÊõ¥"
          else
            echo "backend_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only HEAD~1 HEAD | grep -q "^docker/"; then
            echo "docker_changed=true" >> $GITHUB_OUTPUT
            echo "üê≥ DockerÈÖçÁΩÆÊúâÂèòÊõ¥"
          else
            echo "docker_changed=false" >> $GITHUB_OUTPUT
          fi

      # Ê≠•È™§5ÔºöÈÉ®ÁΩ≤ÈÖçÁΩÆÂíåÊãâÂèñÈïúÂÉè
      - name: Deploy and update services
        run: |
          echo "üöÄ ÂºÄÂßãÈÉ®ÁΩ≤ Coze Studio Âà∞ÊúçÂä°Âô®..."
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV

      # Ê≠•È™§6ÔºöÂú®ÊúçÂä°Âô®‰∏äÊâßË°åÈÉ®ÁΩ≤
      - name: Execute deployment commands
        env:
          FRONTEND_CHANGED: ${{ steps.changes.outputs.frontend_changed }}
          BACKEND_CHANGED: ${{ steps.changes.outputs.backend_changed }}
          DOCKER_CHANGED: ${{ steps.changes.outputs.docker_changed }}
        run: |
          TIMESTAMP=${{ env.TIMESTAMP }}
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "export TIMESTAMP=${TIMESTAMP}; export FRONTEND_CHANGED=${FRONTEND_CHANGED}; export BACKEND_CHANGED=${BACKEND_CHANGED}; export DOCKER_CHANGED=${DOCKER_CHANGED}; bash -s" << 'EOF'
          set -e

          echo "üîß ÂºÄÂßãÂú®ÊúçÂä°Âô®‰∏äÊâßË°åÈÉ®ÁΩ≤ÂëΩ‰ª§..."
          TARGET_DIR="${{ secrets.SERVER_TARGET_DIR }}"
          CODE_DIR="$TARGET_DIR/code"

          # Ê£ÄÊü•ÁõÆÊ†áÁõÆÂΩïÊòØÂê¶Â≠òÂú®
          if [ ! -d "$TARGET_DIR" ]; then
            echo "üìÅ ÂàõÂª∫ÁõÆÊ†áÁõÆÂΩï: $TARGET_DIR"
            mkdir -p "$TARGET_DIR"
          fi

          # Ê£ÄÊü• Docker ÊòØÂê¶ËøêË°å
          if ! docker info > /dev/null 2>&1; then
            echo "‚ùå Docker Êú™ËøêË°åÔºåËØ∑ÂêØÂä® Docker ÊúçÂä°"
            exit 1
          fi

          # Á°Æ‰øù docker ÁõÆÂΩïÂ≠òÂú®
          mkdir -p "$CODE_DIR/docker"

          # Â¶ÇÊûúÊòØÈ¶ñÊ¨°ÈÉ®ÁΩ≤ÔºåËé∑Âèñ docker-compose.yml
          if [ ! -f "$CODE_DIR/docker/docker-compose.yml" ]; then
            echo "üì• È¶ñÊ¨°ÈÉ®ÁΩ≤ÔºåËé∑Âèñ Docker Compose ÈÖçÁΩÆ..."
            curl -o "$CODE_DIR/docker/docker-compose.yml" "https://raw.githubusercontent.com/coze-dev/coze-studio/main/docker/docker-compose.yml" || {
              echo "‚ùå Êó†Ê≥ïËé∑Âèñ docker-compose.ymlÔºåËØ∑ÊâãÂä®ÊîæÁΩÆ"
              exit 1
            }
          fi

          # Â§á‰ªΩÁé∞ÊúâÈÖçÁΩÆÊñá‰ª∂
          echo "üíæ Â§á‰ªΩÁé∞ÊúâÈÖçÁΩÆÊñá‰ª∂..."
          BACKUP_DIR="${TARGET_DIR}/config_backup_${TIMESTAMP}"
          mkdir -p "$BACKUP_DIR"
          for config_file in "$TARGET_DIR"/*.env "$TARGET_DIR"/*.yaml "$TARGET_DIR"/*.yml; do
            if [ -f "$config_file" ]; then
              cp "$config_file" "$BACKUP_DIR/"
              echo "‚úÖ Â§á‰ªΩÈÖçÁΩÆÊñá‰ª∂: $(basename $config_file)"
            fi
          done

          # ËÆæÁΩÆÈÖçÁΩÆÊñá‰ª∂ÈìæÊé•
          echo "üîó ËÆæÁΩÆÈÖçÁΩÆÊñá‰ª∂ÈìæÊé•..."

          # Â§ÑÁêÜ Docker .env Êñá‰ª∂
          if [ -f "$TARGET_DIR/.env" ]; then
            ln -sf "$TARGET_DIR/.env" "$CODE_DIR/docker/.env"
            echo "‚úÖ ÈìæÊé•Ê†πÁõÆÂΩï .env Âà∞ docker/.env"
          else
            echo "‚ùå Êú™ÊâæÂà∞ .env Êñá‰ª∂Âú® $TARGET_DIR/"
            echo "üí° ËØ∑ÂàõÂª∫ .env Êñá‰ª∂Âπ∂ÂèÇËÄÉ docker/.env.example"
            exit 1
          fi

          # Â§ÑÁêÜ AI Ê®°ÂûãÈÖçÁΩÆÊñá‰ª∂
          mkdir -p "$CODE_DIR/backend/conf/model"
          model_count=0
          for model_file in "$TARGET_DIR"/*.yaml "$TARGET_DIR"/*.yml; do
            if [ -f "$model_file" ]; then
              filename=$(basename "$model_file")
              ln -sf "$model_file" "$CODE_DIR/backend/conf/model/$filename"
              echo "‚úÖ ÈìæÊé•Ê®°ÂûãÈÖçÁΩÆ: $filename"
              model_count=$((model_count + 1))
            fi
          done

          if [ "$model_count" -eq 0 ]; then
            echo "‚ö†Ô∏è  Êú™ÊâæÂà∞Ê®°ÂûãÈÖçÁΩÆÊñá‰ª∂ÔºåËØ∑Âú® $TARGET_DIR/ ÂàõÂª∫ *.yaml ÈÖçÁΩÆ"
            echo "üìù ÂèÇËÄÉ: https://github.com/coze-dev/coze-studio/tree/main/backend/conf/model/template"
          fi

          # Ê∏ÖÁêÜÊóßÂ§á‰ªΩÔºà‰øùÁïôÊúÄÊñ∞3‰∏™Ôºâ
          cd "$TARGET_DIR"
          ls -dt config_backup_* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true
          find "$TARGET_DIR" -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true

          # ËøõÂÖ• docker ÁõÆÂΩï
          cd "$CODE_DIR/docker"

          # Ê†πÊçÆÂèòÊõ¥ÊÉÖÂÜµÊô∫ËÉΩÈÉ®ÁΩ≤
          echo "üöÄ ÂºÄÂßãÊô∫ËÉΩÈÉ®ÁΩ≤..."

          # Ê£ÄÊü•Âì™‰∏™ docker compose ÂëΩ‰ª§ÂèØÁî®
          if command -v docker-compose &> /dev/null; then
            DOCKER_COMPOSE="docker-compose"
          else
            DOCKER_COMPOSE="docker compose"
          fi

          # Á°ÆÂÆöÈúÄË¶ÅÊõ¥Êñ∞ÁöÑÊúçÂä°
          SERVICES_TO_UPDATE=""

          if [ "$FRONTEND_CHANGED" = "true" ] || [ "$DOCKER_CHANGED" = "true" ]; then
            SERVICES_TO_UPDATE="$SERVICES_TO_UPDATE coze-web"
            echo "üì¶ ÂâçÁ´ØÊàñDockerÈÖçÁΩÆÊúâÂèòÊõ¥ÔºåÂ∞ÜÊõ¥Êñ∞ coze-web"
          fi

          if [ "$BACKEND_CHANGED" = "true" ] || [ "$DOCKER_CHANGED" = "true" ]; then
            SERVICES_TO_UPDATE="$SERVICES_TO_UPDATE coze-server"
            echo "üîß ÂêéÁ´ØÊàñDockerÈÖçÁΩÆÊúâÂèòÊõ¥ÔºåÂ∞ÜÊõ¥Êñ∞ coze-server"
          fi

          if [ -z "$SERVICES_TO_UPDATE" ]; then
            echo "üìã Ê≤°ÊúâÂ∫îÁî®‰ª£Á†ÅÂèòÊõ¥ÔºåÂè™Ê£ÄÊü•Âü∫Á°ÄËÆæÊñΩÊúçÂä°Áä∂ÊÄÅ"
            $DOCKER_COMPOSE ps
            exit 0
          fi

          echo "üê≥ ÊãâÂèñÊúÄÊñ∞ÈïúÂÉè: $SERVICES_TO_UPDATE"
          $DOCKER_COMPOSE pull $SERVICES_TO_UPDATE || true

          echo "üîÑ ÈáçÂêØÊõ¥Êñ∞ÁöÑÊúçÂä°: $SERVICES_TO_UPDATE"
          $DOCKER_COMPOSE up -d --no-deps $SERVICES_TO_UPDATE

          # Á≠âÂæÖÊúçÂä°ÂêØÂä®
          echo "‚è≥ Á≠âÂæÖÊúçÂä°ÂêØÂä®ÂÆåÊàê..."
          sleep 20

          # Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ
          echo "üîç Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ..."
          $DOCKER_COMPOSE ps

          # Ê£ÄÊü•Êõ¥Êñ∞ÊúçÂä°ÁöÑÂÅ•Â∫∑Áä∂ÊÄÅ
          for service in $SERVICES_TO_UPDATE; do
            echo "üè• Ê£ÄÊü• $service ÂÅ•Â∫∑Áä∂ÊÄÅ..."
            if $DOCKER_COMPOSE ps $service | grep -q "unhealthy\|exited"; then
              echo "‚ùå ÊúçÂä° $service ÂêØÂä®Â§±Ë¥•"
              $DOCKER_COMPOSE logs --tail=20 $service
              exit 1
            else
              echo "‚úÖ ÊúçÂä° $service ËøêË°åÊ≠£Â∏∏"
            fi
          done

          # Ê£ÄÊü•‰∏ªÊúçÂä°ÂèØËÆøÈóÆÊÄßÔºà‰ªÖÂΩìÊõ¥Êñ∞‰∫ÜwebÊàñserverÊó∂Ôºâ
          if echo "$SERVICES_TO_UPDATE" | grep -q "coze-"; then
            echo "üåê Ê£ÄÊü•ÊúçÂä°ÂèØËÆøÈóÆÊÄß..."
            sleep 10
            for i in {1..6}; do
              if curl -f -s http://localhost:8888 > /dev/null 2>&1; then
                echo "‚úÖ Coze Studio ÊúçÂä°ÂêØÂä®ÊàêÂäüÔºÅ"
                echo "üéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅËÆøÈóÆÂú∞ÂùÄ: http://${{ secrets.SERVER_HOST }}:8888"
                break
              elif [ $i -eq 6 ]; then
                echo "‚ö†Ô∏è  ÊúçÂä°ÂèØËÉΩ‰ªçÂú®ÂêØÂä®‰∏≠"
                echo "üìã Êü•ÁúãÊó•Âøó: $DOCKER_COMPOSE logs -f $SERVICES_TO_UPDATE"
              else
                echo "‚è≥ Á≠âÂæÖÊúçÂä°ÂìçÂ∫î... ($i/6)"
                sleep 10
              fi
            done
          fi

          # Ê∏ÖÁêÜÊóßÈïúÂÉèÔºà‰ªÖÊ∏ÖÁêÜÊó†Ê†áÁ≠æÈïúÂÉèÔºâ
          echo "üßπ Ê∏ÖÁêÜÊó†Áî®ÈïúÂÉè..."
          docker image prune -f || true

          echo "üéØ ÈÉ®ÁΩ≤ÊÄªÁªì:"
          echo "   üìä Êõ¥Êñ∞ÁöÑÊúçÂä°: $SERVICES_TO_UPDATE"
          echo "   üìà Âü∫Á°ÄËÆæÊñΩÊúçÂä°‰øùÊåÅËøêË°åÔºåÊï∞ÊçÆÊó†‰∏≠Êñ≠"
          echo "   üîß ÈÖçÁΩÆÊñá‰ª∂: $(ls -1 $TARGET_DIR/*.{env,yaml,yml} 2>/dev/null | wc -l) ‰∏™"

          EOF
